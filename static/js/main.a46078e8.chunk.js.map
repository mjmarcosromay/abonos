{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","button","display","marginTop","spacing","formControl","margin","minWidth","App","classes","dateTime","Date","console","log","className","Typography","variant","FormControl","noValidate","InputLabel","id","Select","labelId","value","MenuItem","TextField","label","type","defaultValue","InputLabelProps","shrink","Container","maxWidth","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8SAOMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,OAAQ,CACNC,QAAS,QACTC,UAAWH,EAAMI,QAAQ,IAE3BC,YAAa,CACXC,OAAQN,EAAMI,QAAQ,GACtBG,SAAU,SAsCCC,MAhCf,WAGE,IAAMC,EAAUX,IACVY,EAAW,IAAIC,KAGrB,OAFAC,QAAQC,IAAIH,GAGV,yBAAKI,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,WAEF,yBAAKF,UAAU,iBACb,kBAACG,EAAA,EAAD,CAAaH,UAAWL,EAAQJ,YAAaa,YAAU,GACrD,kBAACC,EAAA,EAAD,CAAYC,GAAG,cAAf,uBACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,aAAaF,GAAG,SAASG,MAAM,OACzC,kBAACC,EAAA,EAAD,CAAUD,MAAM,OAAhB,kCACA,kBAACC,EAAA,EAAD,CAAUD,MAAM,OAAhB,wCAEN,kBAACE,EAAA,EAAD,CAAWL,GAAG,iBAAqBM,MAAM,yBAA4BC,KAAK,iBACzEC,aAAclB,EAAYI,UAAU,YAAkBe,gBAAiB,CAACC,QAAQ,OAGrF,4BAAQhB,UAAU,cACd,kBAACiB,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACjB,EAAA,EAAD,CAAYC,QAAQ,SAApB,cCjCNiB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BxC,QAAQC,IACN,iHAKE4B,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBlC,QAAQC,IAAI,sCAGR4B,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACL5C,QAAQ4C,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,UAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,UAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCyB,MAAM1B,GACHK,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BV,OAAOC,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL3C,QAAQC,IACN,oEArFA+D,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjCjC,QAAQC,IACN,iHAMJ0B,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.a46078e8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'typeface-roboto';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, Container, TextField, Select, InputLabel, MenuItem, FormControl} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    display: 'block',\n    marginTop: theme.spacing(2),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n}));\n\n\n\nfunction App() {\n\n \n  const classes = useStyles();\n  const dateTime = new Date();\n  console.log(dateTime);\n\n  return (    \n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Typography variant=\"h2\">Abonos</Typography>\n      </header>\n      <div className=\"App-container\">\n        <FormControl className={classes.formControl} noValidate>\n          <InputLabel id=\"train-line\">Seleccione trayecto</InputLabel>\n          <Select labelId=\"train-line\" id=\"select\" value=\"TOM\">\n                <MenuItem value=\"TOM\">Toledo-Madrid Puerta de Atocha</MenuItem>\n                <MenuItem value=\"CRM\">Ciudad Real-Madrid Puerta de Atocha</MenuItem>\n          </Select>\n          <TextField id=\"datetime-local\"     label=\"Fecha del primer viaje\"    type=\"datetime-local\"\n           defaultValue={dateTime}   className=\"textfield\"       InputLabelProps={{shrink: true,    }}  />\n        </FormControl>\n        </div>\n      <footer className=\"App-footer\">\n          <Container maxWidth=\"sm\">\n            <Typography variant=\"body1\">Footer</Typography>\n          </Container>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}